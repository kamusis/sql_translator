- category: Type
  subcategory: DataType
  priority: 100
  name: Convert Sybase data types to PostgreSQL data types
  description: ""
  examples:
    - source: datetime
      target: timestamp
      explanation: Convert datetime to timestamp
    - source: text
      target: text
      explanation: Text type remains same
    - source: money
      target: decimal(19,4)
      explanation: Convert money to decimal
- category: Function
  subcategory: DateFunc
  priority: 90
  name: Convert date/time functions
  description: ""
  examples:
    - source: GETDATE()
      target: CURRENT_TIMESTAMP
      explanation: Convert GETDATE to CURRENT_TIMESTAMP
- category: Procedure
  subcategory: ProcSyntax
  priority: 85
  name: Convert stored procedure syntax and structure
  description: |-
    Handles the following Sybase to PostgreSQL stored procedure conversions:
    1. Procedure Structure:
    	- Change the parameter declaration output to inout
    	- Add language specification (LANGUAGE plpgsql)

    2. Variable Declarations:
    	- Extract variable declarations to the DECLARE section

    3. Variable Assignments:
    	- Variable assignment does not involve querying the table and is changed to direct assignment (SELECT @var = value, @var2 = value2 -> var := value; var2 := value2;)
    	- Direct value assignments (SELECT @var = value -> var := value)
    	- Table query assignments changed to select into (SELECT @var = col -> SELECT col INTO var)

    4. Control Flow:
    	- IF-BEGIN-END blocks to IF-THEN-END IF
    	- Nested IF statements with ELSE branches
  examples:
    - source: |-
        CREATE PROCEDURE update_user_status
            @user_id INT,
            @status VARCHAR(10) OUTPUT,
            @last_updated DATETIME OUTPUT
        AS
        BEGIN
            DECLARE @count INT
            DECLARE @role VARCHAR(20)
            DECLARE @validation_status VARCHAR(20)
            DECLARE @user_status VARCHAR(20)

            SELECT @count = COUNT(*) FROM users WHERE id = @user_id

        	IF EXISTS (SELECT 1 FROM users WHERE id = @user_id)
        	BEGIN
        		SELECT @var1 = col1, @var2 = col2 FROM employees
        	
        		IF @role = 'ADMIN'
        		BEGIN
        			SELECT @validation_status = "VALID", @user_status = "AUTH"
        			SELECT @access = 'FULL'
        			RETURN
        		END
        		ELSE
        		BEGIN
        			SELECT @validation_status = "INVALID", @user_status = "UNAUTH"
        			SELECT @access = 'LIMITED'
        			RETURN
        		END
        	END
        	ELSE
        	BEGIN
        		SELECT @status = 'INACTIVE'
        		SELECT @access = 'NONE'
        		SELECT @current_time = GETDATE()
        		RETURN
        	END

            SELECT @status = 'NOT_FOUND'
            SELECT @last_updated = GETDATE()
            RETURN
        END
      target: "CREATE OR REPLACE PROCEDURE update_user_status(\n    user_id INT,\n    INOUT status VARCHAR(10),\n    INOUT last_updated TIMESTAMP\n) AS $$\nDECLARE\n    count INTEGER;\n    role VARCHAR(20);\n    validation_status VARCHAR(20);\n    user_status VARCHAR(20);\nBEGIN\n    SELECT COUNT(*) INTO count FROM users WHERE id = user_id;\n\n    IF EXISTS (SELECT 1 FROM users WHERE id = user_id) THEN\n        -- Table query uses SELECT INTO\n        SELECT col1, col2 INTO var1, var2 FROM employees;\n        \n        IF role = 'ADMIN' THEN\n            -- Multiple assignments use SELECT INTO\n            SELECT 'VALID', 'AUTH' INTO validation_status, user_status;\n            access := 'FULL';\n        ELSE\n            SELECT 'INVALID', 'UNAUTH' INTO validation_status, user_status;\n            access := 'LIMITED';\n\t\t\treturn\n        END IF;\n    ELSE\n        status := 'INACTIVE';\n        access := 'NONE';\n        current_time_var := CURRENT_TIMESTAMP;\n    END IF;\n\n    status := 'NOT_FOUND';\n    last_updated := CURRENT_TIMESTAMP;\n    RETURN;\nEND;\n$$ LANGUAGE plpgsql;"
      explanation: Convert stored procedure structure, parameters, variables and control flow
